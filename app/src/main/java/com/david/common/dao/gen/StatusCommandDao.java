package com.david.common.dao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.david.common.dao.StatusCommand;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STATUS_COMMAND".
*/
public class StatusCommandDao extends AbstractDao<StatusCommand, Long> {

    public static final String TABLENAME = "STATUS_COMMAND";

    /**
     * Properties of entity StatusCommand.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TimeStamp = new Property(1, long.class, "timeStamp", false, "TIME_STAMP");
        public final static Property Mode = new Property(2, String.class, "mode", false, "MODE");
        public final static Property Ctrl = new Property(3, String.class, "ctrl", false, "CTRL");
        public final static Property Warm = new Property(4, int.class, "warm", false, "WARM");
        public final static Property Inc = new Property(5, int.class, "inc", false, "INC");
        public final static Property Hum = new Property(6, int.class, "hum", false, "HUM");
        public final static Property O2 = new Property(7, int.class, "o2", false, "O2");
        public final static Property Alert = new Property(8, String.class, "alert", false, "ALERT");
        public final static Property ACount = new Property(9, int.class, "ACount", false, "ACOUNT");
        public final static Property Led = new Property(10, int.class, "led", false, "LED");
    }


    public StatusCommandDao(DaoConfig config) {
        super(config);
    }
    
    public StatusCommandDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STATUS_COMMAND\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TIME_STAMP\" INTEGER NOT NULL ," + // 1: timeStamp
                "\"MODE\" TEXT," + // 2: mode
                "\"CTRL\" TEXT," + // 3: ctrl
                "\"WARM\" INTEGER NOT NULL ," + // 4: warm
                "\"INC\" INTEGER NOT NULL ," + // 5: inc
                "\"HUM\" INTEGER NOT NULL ," + // 6: hum
                "\"O2\" INTEGER NOT NULL ," + // 7: o2
                "\"ALERT\" TEXT," + // 8: alert
                "\"ACOUNT\" INTEGER NOT NULL ," + // 9: ACount
                "\"LED\" INTEGER NOT NULL );"); // 10: led
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STATUS_COMMAND\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StatusCommand entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTimeStamp());
 
        String mode = entity.getMode();
        if (mode != null) {
            stmt.bindString(3, mode);
        }
 
        String ctrl = entity.getCtrl();
        if (ctrl != null) {
            stmt.bindString(4, ctrl);
        }
        stmt.bindLong(5, entity.getWarm());
        stmt.bindLong(6, entity.getInc());
        stmt.bindLong(7, entity.getHum());
        stmt.bindLong(8, entity.getO2());
 
        String alert = entity.getAlert();
        if (alert != null) {
            stmt.bindString(9, alert);
        }
        stmt.bindLong(10, entity.getACount());
        stmt.bindLong(11, entity.getLed());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StatusCommand entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTimeStamp());
 
        String mode = entity.getMode();
        if (mode != null) {
            stmt.bindString(3, mode);
        }
 
        String ctrl = entity.getCtrl();
        if (ctrl != null) {
            stmt.bindString(4, ctrl);
        }
        stmt.bindLong(5, entity.getWarm());
        stmt.bindLong(6, entity.getInc());
        stmt.bindLong(7, entity.getHum());
        stmt.bindLong(8, entity.getO2());
 
        String alert = entity.getAlert();
        if (alert != null) {
            stmt.bindString(9, alert);
        }
        stmt.bindLong(10, entity.getACount());
        stmt.bindLong(11, entity.getLed());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StatusCommand readEntity(Cursor cursor, int offset) {
        StatusCommand entity = new StatusCommand( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // timeStamp
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ctrl
            cursor.getInt(offset + 4), // warm
            cursor.getInt(offset + 5), // inc
            cursor.getInt(offset + 6), // hum
            cursor.getInt(offset + 7), // o2
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // alert
            cursor.getInt(offset + 9), // ACount
            cursor.getInt(offset + 10) // led
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StatusCommand entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTimeStamp(cursor.getLong(offset + 1));
        entity.setMode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCtrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWarm(cursor.getInt(offset + 4));
        entity.setInc(cursor.getInt(offset + 5));
        entity.setHum(cursor.getInt(offset + 6));
        entity.setO2(cursor.getInt(offset + 7));
        entity.setAlert(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setACount(cursor.getInt(offset + 9));
        entity.setLed(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StatusCommand entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StatusCommand entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StatusCommand entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
