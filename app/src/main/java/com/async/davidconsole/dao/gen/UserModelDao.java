package com.async.davidconsole.dao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.david.incubator.dao.UserModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_MODEL".
*/
public class UserModelDao extends AbstractDao<UserModel, Long> {

    public static final String TABLENAME = "USER_MODEL";

    /**
     * Properties of entity UserModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property Sex = new Property(3, boolean.class, "sex", false, "SEX");
        public final static Property StartTimeStamp = new Property(4, long.class, "startTimeStamp", false, "START_TIME_STAMP");
        public final static Property EndTimeStamp = new Property(5, long.class, "endTimeStamp", false, "END_TIME_STAMP");
        public final static Property BloodGroup = new Property(6, String.class, "bloodGroup", false, "BLOOD_GROUP");
        public final static Property Birthday = new Property(7, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Weight = new Property(8, int.class, "weight", false, "WEIGHT");
        public final static Property GestationalAge = new Property(9, int.class, "gestationalAge", false, "GESTATIONAL_AGE");
        public final static Property History = new Property(10, String.class, "history", false, "HISTORY");
    }


    public UserModelDao(DaoConfig config) {
        super(config);
    }
    
    public UserModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"USER_ID\" TEXT," + // 2: userId
                "\"SEX\" INTEGER NOT NULL ," + // 3: sex
                "\"START_TIME_STAMP\" INTEGER NOT NULL ," + // 4: startTimeStamp
                "\"END_TIME_STAMP\" INTEGER NOT NULL ," + // 5: endTimeStamp
                "\"BLOOD_GROUP\" TEXT," + // 6: bloodGroup
                "\"BIRTHDAY\" TEXT," + // 7: birthday
                "\"WEIGHT\" INTEGER NOT NULL ," + // 8: weight
                "\"GESTATIONAL_AGE\" INTEGER NOT NULL ," + // 9: gestationalAge
                "\"HISTORY\" TEXT);"); // 10: history
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
        stmt.bindLong(4, entity.getSex() ? 1L: 0L);
        stmt.bindLong(5, entity.getStartTimeStamp());
        stmt.bindLong(6, entity.getEndTimeStamp());
 
        String bloodGroup = entity.getBloodGroup();
        if (bloodGroup != null) {
            stmt.bindString(7, bloodGroup);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(8, birthday);
        }
        stmt.bindLong(9, entity.getWeight());
        stmt.bindLong(10, entity.getGestationalAge());
 
        String history = entity.getHistory();
        if (history != null) {
            stmt.bindString(11, history);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
        stmt.bindLong(4, entity.getSex() ? 1L: 0L);
        stmt.bindLong(5, entity.getStartTimeStamp());
        stmt.bindLong(6, entity.getEndTimeStamp());
 
        String bloodGroup = entity.getBloodGroup();
        if (bloodGroup != null) {
            stmt.bindString(7, bloodGroup);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(8, birthday);
        }
        stmt.bindLong(9, entity.getWeight());
        stmt.bindLong(10, entity.getGestationalAge());
 
        String history = entity.getHistory();
        if (history != null) {
            stmt.bindString(11, history);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserModel readEntity(Cursor cursor, int offset) {
        UserModel entity = new UserModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.getShort(offset + 3) != 0, // sex
            cursor.getLong(offset + 4), // startTimeStamp
            cursor.getLong(offset + 5), // endTimeStamp
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // bloodGroup
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // birthday
            cursor.getInt(offset + 8), // weight
            cursor.getInt(offset + 9), // gestationalAge
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // history
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.getShort(offset + 3) != 0);
        entity.setStartTimeStamp(cursor.getLong(offset + 4));
        entity.setEndTimeStamp(cursor.getLong(offset + 5));
        entity.setBloodGroup(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBirthday(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWeight(cursor.getInt(offset + 8));
        entity.setGestationalAge(cursor.getInt(offset + 9));
        entity.setHistory(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
